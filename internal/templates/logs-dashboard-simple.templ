package templates

import (
	"pippaothy/internal/logs"
	"fmt"
)

templ LogsDashboardSimple(result logs.LogResult, stats logs.LogStats) {
	<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
		<div class="mb-8">
			<h1 class="text-3xl font-bold text-base-content">Logs Dashboard</h1>
			<p class="text-base-content/60 mt-2">Real-time monitoring and analytics</p>
		</div>

		<!-- Stats Cards -->
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
			<div class="bg-base-100 rounded-lg shadow p-6">
				<div class="flex items-center justify-between">
					<div>
						<p class="text-sm text-base-content/60">Total Requests</p>
						<p class="text-2xl font-bold text-base-content">{ fmt.Sprintf("%d", stats.TotalRequests) }</p>
					</div>
					<div class="text-primary">
						<svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
						</svg>
					</div>
				</div>
			</div>

			<div class="bg-base-100 rounded-lg shadow p-6">
				<div class="flex items-center justify-between">
					<div>
						<p class="text-sm text-base-content/60">Unique IPs</p>
						<p class="text-2xl font-bold text-base-content">{ fmt.Sprintf("%d", stats.UniqueIPs) }</p>
					</div>
					<div class="text-success">
						<svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
						</svg>
					</div>
				</div>
			</div>

			<div class="bg-base-100 rounded-lg shadow p-6">
				<div class="flex items-center justify-between">
					<div>
						<p class="text-sm text-base-content/60">Errors</p>
						<p class="text-2xl font-bold text-error">{ fmt.Sprintf("%d", stats.ErrorCount) }</p>
					</div>
					<div class="text-error">
						<svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</div>
				</div>
			</div>

			<div class="bg-base-100 rounded-lg shadow p-6">
				<div class="flex items-center justify-between">
					<div>
						<p class="text-sm text-base-content/60">Warnings</p>
						<p class="text-2xl font-bold text-warning">{ fmt.Sprintf("%d", stats.WarningCount) }</p>
					</div>
					<div class="text-warning">
						<svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
						</svg>
					</div>
				</div>
			</div>
		</div>

		<!-- Summary Stats -->
		<div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
			<!-- Log Type Breakdown -->
			<div class="bg-base-100 rounded-lg shadow p-6">
				<h2 class="text-lg font-semibold mb-4 text-base-content">Log Sources</h2>
				<div class="space-y-3">
					for logType, count := range stats.LogTypeBreakdown {
						<div class="flex justify-between items-center">
							<span class="text-base-content/60 capitalize">{ logType }</span>
							<div class="flex items-center space-x-2">
								<span class="text-base-content font-medium">{ fmt.Sprintf("%d", count) }</span>
								if stats.TotalRequests > 0 {
									<span class="text-xs text-base-content/50">({ fmt.Sprintf("%.1f%%", float64(count)*100/float64(stats.TotalRequests)) })</span>
								}
							</div>
						</div>
					}
				</div>
			</div>

			<!-- Status Codes -->
			<div class="bg-base-100 rounded-lg shadow p-6">
				<h2 class="text-lg font-semibold mb-4 text-base-content">Status Codes</h2>
				<div class="space-y-3">
					for code, count := range stats.StatusCodeDist {
						<div class="flex justify-between items-center">
							<span class={ "font-mono", templ.KV("text-success", code == "200"), templ.KV("text-warning", code == "404"), templ.KV("text-error", code[0:1] == "5") }>{ code }</span>
							<div class="flex items-center space-x-2">
								<span class="text-base-content font-medium">{ fmt.Sprintf("%d", count) }</span>
								if stats.TotalRequests > 0 {
									<span class="text-xs text-base-content/50">({ fmt.Sprintf("%.1f%%", float64(count)*100/float64(stats.TotalRequests)) })</span>
								}
							</div>
						</div>
					}
				</div>
			</div>

			<!-- Top Paths -->
			<div class="bg-base-100 rounded-lg shadow p-6">
				<h2 class="text-lg font-semibold mb-4 text-base-content">Top Paths</h2>
				<div class="space-y-3">
					for _, path := range stats.TopPaths[:min(len(stats.TopPaths), 5)] {
						<div class="flex justify-between items-center">
							<span class="text-base-content/60 font-mono text-sm truncate flex-1 mr-2">{ path.Path }</span>
							<span class="text-base-content font-medium">{ fmt.Sprintf("%d", path.Count) }</span>
						</div>
					}
				</div>
			</div>
		</div>

		<!-- Recent Logs Table -->
		<div class="bg-base-100 rounded-lg shadow overflow-hidden">
			<div class="px-6 py-4 border-b border-base-200">
				<h2 class="text-lg font-semibold text-base-content">Recent Logs</h2>
			</div>
			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-base-200">
					<thead class="bg-base-200">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-base-content/60 uppercase tracking-wider">Time</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-base-content/60 uppercase tracking-wider">Level</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-base-content/60 uppercase tracking-wider">Method</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-base-content/60 uppercase tracking-wider">Path</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-base-content/60 uppercase tracking-wider">IP</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-base-content/60 uppercase tracking-wider">Message</th>
						</tr>
					</thead>
					<tbody class="bg-base-100 divide-y divide-base-200">
						for _, entry := range result.Entries {
							<tr class="hover:bg-base-200">
								<td class="px-6 py-4 whitespace-nowrap text-sm text-base-content">
									{ entry.Timestamp.Format("15:04:05") }
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm">
									if entry.Level == "error" {
										<span class="badge badge-error badge-sm">ERROR</span>
									} else if entry.Level == "warn" {
										<span class="badge badge-warning badge-sm">WARN</span>
									} else {
										<span class="badge badge-success badge-sm">INFO</span>
									}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-base-content">
									{ entry.Method }
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-base-content">
									{ entry.Path }
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-base-content">
									{ entry.ClientIP }
								</td>
								<td class="px-6 py-4 text-sm text-base-content max-w-md truncate">
									{ entry.Message }
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<!-- Refresh Button -->
		<div class="mt-6 text-center">
			<button onclick="location.reload()" class="btn btn-primary">
				Refresh Dashboard
			</button>
		</div>
	</div>
}