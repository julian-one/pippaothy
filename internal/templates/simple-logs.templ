package templates

import (
	"fmt"
	"time"
)

// Simple log entry for templates
type SimpleLogEntry struct {
	Timestamp time.Time
	Level     string
	Message   string
	ClientIP  string
	Method    string
	Path      string
	RequestID string
}

// Simple log data structure
type SimpleLogData struct {
	Entries []SimpleLogEntry
	Groups  map[string][]SimpleLogEntry
	Page    int
	Limit   int
	HasMore bool
	Level   string
	GroupBy string
	Error   string
}

templ logEntryComponent(entry SimpleLogEntry) {
	<div class={ "p-4 bg-gray-50 rounded-lg border-l-4", getLevelColor(entry.Level) }>
		<div class="flex justify-between items-start mb-2">
			<div class="text-sm text-gray-500">
				{ entry.Timestamp.Format("2006-01-02 15:04:05") }
				if entry.RequestID != "" {
					<span class="ml-2 text-xs text-blue-600 font-mono">{ entry.RequestID }</span>
				}
			</div>
			<span class={ "text-xs font-semibold px-2 py-1 rounded", getLevelBadge(entry.Level) }>
				{ entry.Level }
			</span>
		</div>
		
		<div class="text-gray-800 font-mono text-sm mb-2">
			{ entry.Message }
		</div>
		
		if entry.Method != "" && entry.Path != "" {
			<div class="text-xs text-blue-700 bg-blue-50 px-2 py-1 rounded">
				{ entry.Method } { entry.Path }
			</div>
		}
		
		if entry.ClientIP != "" {
			<div class="text-xs text-gray-600 mt-1">
				IP: { entry.ClientIP }
			</div>
		}
	</div>
}

templ SimpleLogs(data SimpleLogData) {
	<div class="max-w-4xl w-full p-6 bg-white rounded-lg shadow-md border">
		<div class="mb-6">
			<h2 class="text-2xl font-bold text-gray-800 mb-2">Application Logs</h2>
			<p class="text-gray-600">Recent log entries from the application</p>
		</div>

		<!-- Simple Filter Form -->
		<form 
			hx-get="/logs" 
			hx-target="#log-container"
			hx-indicator="#loading"
			class="mb-6 p-4 bg-gray-50 rounded-lg"
		>
			<div class="flex gap-4 items-center">
				<div>
					<label for="level" class="block text-sm font-medium text-gray-700 mb-1">Level:</label>
					<select name="level" value={ data.Level } class="px-3 py-2 border border-gray-300 rounded-md">
						<option value="">All</option>
						<option value="debug">Debug</option>
						<option value="info">Info</option>
						<option value="warn">Warn</option>
						<option value="error">Error</option>
					</select>
				</div>
				<div>
					<label for="limit" class="block text-sm font-medium text-gray-700 mb-1">Show:</label>
					<select name="limit" value={ fmt.Sprintf("%d", data.Limit) } class="px-3 py-2 border border-gray-300 rounded-md">
						<option value="25">25</option>
						<option value="50">50</option>
						<option value="100">100</option>
					</select>
				</div>
				<div>
					<label for="groupBy" class="block text-sm font-medium text-gray-700 mb-1">Group By:</label>
					<select name="groupBy" value={ data.GroupBy } class="px-3 py-2 border border-gray-300 rounded-md">
						<option value="">None</option>
						<option value="date">Date</option>
						<option value="hour">Hour</option>
						<option value="ip">IP Address</option>
					</select>
				</div>
				<div class="pt-6">
					<button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
						Filter
					</button>
				</div>
			</div>
		</form>

		<!-- Loading indicator -->
		<div id="loading" class="htmx-indicator text-center py-4 text-gray-500">
			Loading...
		</div>

		<!-- Log entries container -->
		<div id="log-container">
			@SimpleLogEntries(data)
		</div>
	</div>
}

templ SimpleLogEntries(data SimpleLogData) {
	if data.Error != "" {
		<div class="bg-red-50 border border-red-200 rounded-md p-4 mb-4">
			<p class="text-red-700 font-medium">Error loading logs</p>
			<p class="text-red-600 text-sm mt-1">{ data.Error }</p>
		</div>
	} else if data.Groups != nil && len(data.Groups) > 0 {
		<!-- Grouped log entries -->
		<div class="space-y-6 mb-6">
			for groupKey, groupEntries := range data.Groups {
				<div class="border border-gray-200 rounded-lg p-4">
					<h3 class="text-lg font-semibold text-gray-800 mb-3">
						if data.GroupBy == "ip" {
							IP: { groupKey }
						} else if data.GroupBy == "date" {
							Date: { groupKey }
						} else if data.GroupBy == "hour" {
							Hour: { groupKey }
						} else {
							{ groupKey }
						}
						<span class="ml-2 text-sm font-normal text-gray-500">({ fmt.Sprintf("%d", len(groupEntries)) } entries)</span>
					</h3>
					<div class="space-y-2">
						for _, entry := range groupEntries {
							@logEntryComponent(entry)
						}
					</div>
				</div>
			}
		</div>
	} else {
		<!-- Log entries -->
		<div class="space-y-3 mb-6">
			for _, entry := range data.Entries {
				@logEntryComponent(entry)
			}
		</div>

		<!-- Simple pagination -->
		<div class="flex justify-between items-center">
			<button
				if data.Page <= 1 {
					disabled
				}
				hx-get={ fmt.Sprintf("/logs?page=%d&limit=%d&level=%s&groupBy=%s", data.Page-1, data.Limit, data.Level, data.GroupBy) }
				hx-target="#log-container"
				hx-indicator="#loading"
				class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
			>
				Previous
			</button>
			
			<span class="text-gray-600">Page { fmt.Sprintf("%d", data.Page) }</span>
			
			<button
				if !data.HasMore {
					disabled
				}
				hx-get={ fmt.Sprintf("/logs?page=%d&limit=%d&level=%s&groupBy=%s", data.Page+1, data.Limit, data.Level, data.GroupBy) }
				hx-target="#log-container"
				hx-indicator="#loading"
				class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
			>
				Next
			</button>
		</div>
	}
}

func getLevelColor(level string) string {
	switch level {
	case "error":
		return "border-red-500"
	case "warn":
		return "border-yellow-500"
	case "info":
		return "border-blue-500"
	case "debug":
		return "border-gray-400"
	default:
		return "border-gray-300"
	}
}

func getLevelBadge(level string) string {
	switch level {
	case "error":
		return "bg-red-100 text-red-800"
	case "warn":
		return "bg-yellow-100 text-yellow-800"
	case "info":
		return "bg-blue-100 text-blue-800"
	case "debug":
		return "bg-gray-100 text-gray-800"
	default:
		return "bg-gray-100 text-gray-800"
	}
}