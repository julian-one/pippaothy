package templates

import (
	"fmt"
	"pippaothy/internal/recipes"
)

templ RecipesList(recipeList []recipes.Recipe, isOwner bool) {
	<div class="grid gap-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-800">
				if isOwner {
					My Recipes
				} else {
					Discover Recipes
				}
			</h1>
			if isOwner {
				<a href="/recipes/new" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
					+ New Recipe
				</a>
			}
		</div>

		if len(recipeList) == 0 {
			<div class="text-center py-12 bg-white rounded-lg shadow-sm">
				<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
				</svg>
				<p class="mt-4 text-gray-600">No recipes found</p>
				if isOwner {
					<p class="mt-2 text-sm text-gray-500">Start by creating your first recipe!</p>
				}
			</div>
		} else {
			<div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
				for _, recipe := range recipeList {
					@RecipeCard(recipe)
				}
			</div>
		}
	</div>
}

templ RecipeCard(recipe recipes.Recipe) {
	<article class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow overflow-hidden">
		if recipe.ImageURL.Valid && recipe.ImageURL.String != "" {
			<img src={ recipe.ImageURL.String } alt={ recipe.Title } class="w-full h-48 object-cover"/>
		} else {
			<div class="w-full h-48 bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center">
				<svg class="h-16 w-16 text-white opacity-75" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h18M3 7h18M3 11h18m-9 4h9"></path>
				</svg>
			</div>
		}
		<div class="p-6">
			<h3 class="text-xl font-semibold text-gray-800 mb-2">
				<a href={ templ.SafeURL(fmt.Sprintf("/recipes/%d", recipe.RecipeID)) } class="hover:text-blue-600 transition-colors">
					{ recipe.Title }
				</a>
			</h3>
			if recipe.Description.Valid && recipe.Description.String != "" {
				<p class="text-gray-600 text-sm mb-4 line-clamp-2">{ recipe.Description.String }</p>
			}
			<div class="flex items-center gap-4 text-sm text-gray-500">
				if recipe.PrepTime.Valid {
					<div class="flex items-center gap-1">
						<svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span>{ fmt.Sprintf("%d min prep", recipe.PrepTime.Int64) }</span>
					</div>
				}
				if recipe.CookTime.Valid {
					<div class="flex items-center gap-1">
						<svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z"></path>
						</svg>
						<span>{ fmt.Sprintf("%d min cook", recipe.CookTime.Int64) }</span>
					</div>
				}
			</div>
			<div class="mt-3 flex justify-between items-center">
				if recipe.Difficulty.Valid && recipe.Difficulty.String != "" {
					<span class={ fmt.Sprintf("inline-block px-3 py-1 text-xs font-medium rounded-full %s", getDifficultyClass(recipe.Difficulty.String)) }>
						{ recipe.Difficulty.String }
					</span>
				} else {
					<div></div>
				}
				if recipe.SourceName.Valid && recipe.SourceName.String != "" {
					<span class="text-xs text-gray-400 flex items-center gap-1">
						<svg class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.102m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
						</svg>
						{ recipe.SourceName.String }
					</span>
				}
			</div>
		</div>
	</article>
}

templ RecipeDetail(recipe recipes.Recipe, isOwner bool, csrfToken string) {
	<div class="max-w-4xl mx-auto">
		<div class="bg-white rounded-lg shadow-lg overflow-hidden">
			if recipe.ImageURL.Valid && recipe.ImageURL.String != "" {
				<img src={ recipe.ImageURL.String } alt={ recipe.Title } class="w-full h-64 md:h-96 object-cover"/>
			}
			
			<div class="p-6 md:p-8">
				<div class="flex justify-between items-start mb-6">
					<div>
						<h1 class="text-3xl font-bold text-gray-800 mb-2">{ recipe.Title }</h1>
						if recipe.Description.Valid && recipe.Description.String != "" {
							<p class="text-gray-600">{ recipe.Description.String }</p>
						}
					</div>
					if isOwner {
						<div class="flex gap-2">
							<a href={ templ.SafeURL(fmt.Sprintf("/recipes/%d/edit", recipe.RecipeID)) } 
							   class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
								Edit
							</a>
							<button
								hx-delete={ fmt.Sprintf("/recipes/%d", recipe.RecipeID) }
								hx-confirm="Are you sure you want to delete this recipe?"
								hx-include="[name='csrf_token']"
								hx-target="body"
								class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
							>
								Delete
							</button>
							<input type="hidden" name="csrf_token" value={ csrfToken }/>
						</div>
					}
				</div>

				<div class="grid md:grid-cols-4 gap-4 mb-8 p-4 bg-gray-50 rounded-lg">
					if recipe.PrepTime.Valid {
						<div class="text-center">
							<div class="text-2xl font-bold text-blue-600">{ fmt.Sprintf("%d", recipe.PrepTime.Int64) }</div>
							<div class="text-sm text-gray-600">min prep</div>
						</div>
					}
					if recipe.CookTime.Valid {
						<div class="text-center">
							<div class="text-2xl font-bold text-orange-600">{ fmt.Sprintf("%d", recipe.CookTime.Int64) }</div>
							<div class="text-sm text-gray-600">min cook</div>
						</div>
					}
					if recipe.Servings.Valid {
						<div class="text-center">
							<div class="text-2xl font-bold text-green-600">{ fmt.Sprintf("%d", recipe.Servings.Int64) }</div>
							<div class="text-sm text-gray-600">servings</div>
						</div>
					}
					if recipe.Difficulty.Valid && recipe.Difficulty.String != "" {
						<div class="text-center">
							<div class={ fmt.Sprintf("text-2xl font-bold %s", getDifficultyTextColor(recipe.Difficulty.String)) }>
								{ recipe.Difficulty.String }
							</div>
							<div class="text-sm text-gray-600">difficulty</div>
						</div>
					}
				</div>

				<div class="grid md:grid-cols-2 gap-8">
					<div>
						<h2 class="text-xl font-semibold text-gray-800 mb-4">Ingredients</h2>
						<div class="bg-gray-50 rounded-lg p-4">
							<ul class="space-y-2">
								for _, ingredient := range recipe.Ingredients {
									<li class="text-gray-700">{ ingredient.IngredientText }</li>
								}
							</ul>
						</div>
					</div>

					<div>
						<h2 class="text-xl font-semibold text-gray-800 mb-4">Instructions</h2>
						<div class="bg-gray-50 rounded-lg p-4">
							<ol class="space-y-3">
								for i, instruction := range recipe.Instructions {
									<li class="text-gray-700">
										<span class="font-semibold text-gray-900">{ fmt.Sprintf("%d.", i+1) }</span>
										{ instruction.InstructionText }
									</li>
								}
							</ol>
						</div>
					</div>
				</div>

				if len(recipe.Tags) > 0 {
					<div class="mt-8">
						<h3 class="text-lg font-semibold text-gray-800 mb-3">Tags</h3>
						<div class="flex flex-wrap gap-2">
							for _, tag := range recipe.Tags {
								<span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">{ tag }</span>
							}
						</div>
					</div>
				}

				<div class="mt-6 space-y-2">
					if recipe.Cuisine.Valid && recipe.Cuisine.String != "" {
						<p class="text-gray-600">
							<span class="font-semibold">Cuisine:</span> { recipe.Cuisine.String }
						</p>
					}
					if recipe.SourceName.Valid && recipe.SourceName.String != "" && recipe.SourceURL.Valid && recipe.SourceURL.String != "" {
						<p class="text-gray-600">
							<span class="font-semibold">Source:</span> 
							<a href={ templ.SafeURL(recipe.SourceURL.String) } 
							   target="_blank" 
							   rel="noopener noreferrer"
							   class="text-blue-600 hover:text-blue-800 hover:underline">
								{ recipe.SourceName.String }
								<svg class="inline h-3 w-3 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
								</svg>
							</a>
						</p>
					}
				</div>
			</div>
		</div>
	</div>
}

templ RecipeForm(recipe *recipes.Recipe, isEdit bool, csrfToken string) {
	<div class="max-w-3xl mx-auto">
		<div class="bg-white rounded-lg shadow-lg p-6 md:p-8">
			<h1 class="text-2xl font-bold text-gray-800 mb-6">
				if isEdit {
					Edit Recipe
				} else {
					Create New Recipe
				}
			</h1>

			<form 
				if isEdit {
					hx-put={ fmt.Sprintf("/recipes/%d", recipe.RecipeID) }
				} else {
					hx-post="/recipes"
				}
				hx-target="body"
				hx-swap="outerHTML"
				class="grid gap-6"
			>
				<input type="hidden" name="csrf_token" value={ csrfToken }/>

				<div>
					<label for="title" class="block text-sm font-medium text-gray-700 mb-2">Title *</label>
					<input
						type="text"
						id="title"
						name="title"
						required
						if recipe != nil {
							value={ recipe.Title }
						}
						class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
						placeholder="Enter recipe title"
					/>
				</div>

				<div>
					<label for="description" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
					<textarea
						id="description"
						name="description"
						rows="3"
						class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
						placeholder="Brief description of your recipe"
					>{ ifRecipeDescriptionText(recipe) }</textarea>
				</div>

				<div class="grid md:grid-cols-2 gap-6">
					<div>
						<label for="ingredients" class="block text-sm font-medium text-gray-700 mb-2">Ingredients *</label>
						<textarea
							id="ingredients"
							name="ingredients"
							required
							rows="8"
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
							placeholder="List ingredients, one per line"
						>{ ifRecipeIngredientsText(recipe) }</textarea>
					</div>

					<div>
						<label for="instructions" class="block text-sm font-medium text-gray-700 mb-2">Instructions *</label>
						<textarea
							id="instructions"
							name="instructions"
							required
							rows="8"
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
							placeholder="Step-by-step instructions"
						>{ ifRecipeInstructionsText(recipe) }</textarea>
					</div>
				</div>

				<div class="grid md:grid-cols-4 gap-4">
					<div>
						<label for="prep_time" class="block text-sm font-medium text-gray-700 mb-2">Prep Time (min)</label>
						<input
							type="number"
							id="prep_time"
							name="prep_time"
							min="0"
							if recipe != nil && recipe.PrepTime.Valid {
								value={ fmt.Sprintf("%d", recipe.PrepTime.Int64) }
							}
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
						/>
					</div>

					<div>
						<label for="cook_time" class="block text-sm font-medium text-gray-700 mb-2">Cook Time (min)</label>
						<input
							type="number"
							id="cook_time"
							name="cook_time"
							min="0"
							if recipe != nil && recipe.CookTime.Valid {
								value={ fmt.Sprintf("%d", recipe.CookTime.Int64) }
							}
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
						/>
					</div>

					<div>
						<label for="servings" class="block text-sm font-medium text-gray-700 mb-2">Servings</label>
						<input
							type="number"
							id="servings"
							name="servings"
							min="1"
							if recipe != nil && recipe.Servings.Valid {
								value={ fmt.Sprintf("%d", recipe.Servings.Int64) }
							}
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
						/>
					</div>

					<div>
						<label for="difficulty" class="block text-sm font-medium text-gray-700 mb-2">Difficulty</label>
						<select
							id="difficulty"
							name="difficulty"
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
						>
							<option value="">Select...</option>
							<option value="easy" if recipe != nil && recipe.Difficulty.Valid && recipe.Difficulty.String == "easy" { selected }>Easy</option>
							<option value="medium" if recipe != nil && recipe.Difficulty.Valid && recipe.Difficulty.String == "medium" { selected }>Medium</option>
							<option value="hard" if recipe != nil && recipe.Difficulty.Valid && recipe.Difficulty.String == "hard" { selected }>Hard</option>
						</select>
					</div>
				</div>

				<div class="grid md:grid-cols-2 gap-4">
					<div>
						<label for="cuisine" class="block text-sm font-medium text-gray-700 mb-2">Cuisine</label>
						<input
							type="text"
							id="cuisine"
							name="cuisine"
							if recipe != nil && recipe.Cuisine.Valid {
								value={ recipe.Cuisine.String }
							}
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
							placeholder="e.g., Italian, Mexican, Thai"
						/>
					</div>

					<div>
						<label for="image_url" class="block text-sm font-medium text-gray-700 mb-2">Image URL</label>
						<input
							type="url"
							id="image_url"
							name="image_url"
							if recipe != nil && recipe.ImageURL.Valid {
								value={ recipe.ImageURL.String }
							}
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
							placeholder="https://example.com/image.jpg"
						/>
					</div>
				</div>

				<div>
					<label for="tags" class="block text-sm font-medium text-gray-700 mb-2">Tags</label>
					<input
						type="text"
						id="tags"
						name="tags"
						if recipe != nil && len(recipe.Tags) > 0 {
							value={ joinTags(recipe.Tags) }
						}
						class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
						placeholder="vegetarian, gluten-free, quick (comma separated)"
					/>
				</div>

				<div class="flex items-center">
					<input
						type="checkbox"
						id="is_public"
						name="is_public"
						if recipe != nil && recipe.IsPublic {
							checked
						}
						class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
					/>
					<label for="is_public" class="ml-2 block text-sm text-gray-700">
						Make this recipe public
					</label>
				</div>

				<div class="flex gap-4">
					<button
						type="submit"
						class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium"
					>
						if isEdit {
							Update Recipe
						} else {
							Create Recipe
						}
					</button>
					<a href="/recipes" class="bg-gray-300 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-400 transition-colors font-medium">
						Cancel
					</a>
				</div>
			</form>
		</div>
	</div>
}

func getDifficultyClass(difficulty string) string {
	switch difficulty {
	case "easy":
		return "bg-green-100 text-green-800"
	case "medium":
		return "bg-yellow-100 text-yellow-800"
	case "hard":
		return "bg-red-100 text-red-800"
	default:
		return "bg-gray-100 text-gray-800"
	}
}

func getDifficultyTextColor(difficulty string) string {
	switch difficulty {
	case "easy":
		return "text-green-600"
	case "medium":
		return "text-yellow-600"
	case "hard":
		return "text-red-600"
	default:
		return "text-gray-600"
	}
}

func joinTags(tags []string) string {
	result := ""
	for i, tag := range tags {
		if i > 0 {
			result += ", "
		}
		result += tag
	}
	return result
}

func ifRecipeDescriptionText(recipe *recipes.Recipe) string {
	if recipe != nil && recipe.Description.Valid {
		return recipe.Description.String
	}
	return ""
}

func ifRecipeIngredientsText(recipe *recipes.Recipe) string {
	if recipe != nil && len(recipe.Ingredients) > 0 {
		var ingredients []string
		for _, ingredient := range recipe.Ingredients {
			ingredients = append(ingredients, ingredient.IngredientText)
		}
		return fmt.Sprintf("%v", ingredients)
	}
	return ""
}

func ifRecipeInstructionsText(recipe *recipes.Recipe) string {
	if recipe != nil && len(recipe.Instructions) > 0 {
		var instructions []string
		for _, instruction := range recipe.Instructions {
			instructions = append(instructions, instruction.InstructionText)
		}
		return fmt.Sprintf("%v", instructions)
	}
	return ""
}