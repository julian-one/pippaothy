package templates

import (
	"fmt"
	"pippaothy/internal/recipe"
)

templ RecipesList(recipeList []recipe.Recipe) {
	<div class="container-wide mx-auto px-4 section-spacing space-y-8 page-enter">
		<div class="text-center mb-12">
			<h1 class="text-5xl font-light mb-4 text-base-content">My <span class="text-primary">Recipes</span></h1>
			<p class="text-lg text-muted">A collection of favorite dishes and culinary experiments</p>
		</div>
		<div class="flex justify-center mb-12">
			<a href="/recipes/new" class="btn btn-primary btn-lg btn-glow touch-target">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
				</svg>
				Create New Recipe
			</a>
		</div>
		if len(recipeList) == 0 {
			<section class="text-center py-16">
				<div class="card bg-base-100 shadow-xl max-w-md mx-auto">
					<div class="card-body">
						<h2 class="card-title justify-center text-2xl mb-4">No recipes yet</h2>
						<p class="text-base-content/60 mb-6">Start building your recipe collection by creating your first recipe!</p>
						<a href="/recipes/new" class="btn btn-primary">Get Started</a>
					</div>
				</div>
			</section>
		} else {
			<section>
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 animate-stagger">
					for _, recipe := range recipeList {
						@RecipeCard(recipe)
					}
				</div>
			</section>
		}
	</div>
}

templ RecipeCard(recipe recipe.Recipe) {
	<div class="card card-interactive shadow-xl h-full flex flex-col">
		if recipe.ImageUrl != nil && *recipe.ImageUrl != "" {
			<figure class="rounded-t-2xl overflow-hidden flex-shrink-0">
				<img src={ *recipe.ImageUrl } alt={ recipe.Title } class="h-48 w-full object-cover"/>
			</figure>
		} else {
			<div class="h-48 bg-base-200 flex items-center justify-center rounded-t-2xl flex-shrink-0">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-base-content/30" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
				</svg>
			</div>
		}
		<div class="card-body p-6 bg-base-100 flex flex-col flex-grow">
			<div class="flex-grow space-y-3">
				<h2 class="card-title text-xl font-semibold text-base-content">{ recipe.Title }</h2>
				if recipe.Description != nil {
					<p class="text-sm text-base-content/80 leading-relaxed line-clamp-2">{ *recipe.Description }</p>
				} else {
					<div class="h-10"></div>
				}
				<div class="grid grid-cols-2 gap-2 min-h-[4rem]">
					if recipe.PrepTime != nil || recipe.CookTime != nil {
						<div class="badge badge-outline badge-lg bg-base-100 h-auto py-2">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
							<span class="text-xs">
								if recipe.PrepTime != nil && recipe.CookTime != nil {
									{ fmt.Sprintf("%d + %d min", *recipe.PrepTime, *recipe.CookTime) }
								} else if recipe.PrepTime != nil {
									{ fmt.Sprintf("%d min prep", *recipe.PrepTime) }
								} else {
									{ fmt.Sprintf("%d min cook", *recipe.CookTime) }
								}
							</span>
						</div>
					} else {
						<div></div>
					}
					if recipe.Servings != nil {
						<div class="badge badge-outline badge-lg bg-base-100 h-auto py-2">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
							</svg>
							<span class="text-xs">{ fmt.Sprintf("%d servings", *recipe.Servings) }</span>
						</div>
					} else {
						<div></div>
					}
					if recipe.Difficulty != nil {
						<div class="badge badge-primary badge-lg col-span-2 h-auto py-2">{ *recipe.Difficulty }</div>
					} else {
						<div class="col-span-2"></div>
					}
				</div>
			</div>
			<div class="card-actions justify-end mt-4">
				<a href={ templ.SafeURL(fmt.Sprintf("/recipes/%d", recipe.RecipeId)) } class="btn btn-primary btn-sm">
					View Recipe
					<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
					</svg>
				</a>
			</div>
		</div>
	</div>
}

templ RecipeDetail(recipe recipe.RecipeWithDetails, isOwner bool) {
	<div class="max-w-6xl mx-auto px-4 py-8 md:py-12 space-y-8">
		<div class="text-center mb-8">
			<h1 class="text-5xl font-light mb-4 text-base-content">{ recipe.Recipe.Title }</h1>
			if recipe.Recipe.Description != nil {
				<p class="text-lg text-base-content/70 max-w-3xl mx-auto leading-relaxed">{ *recipe.Recipe.Description }</p>
			}
			if isOwner {
				<div class="flex justify-center gap-2 mt-6">
					<a href={ templ.SafeURL(fmt.Sprintf("/recipes/%d/edit", recipe.Recipe.RecipeId)) } class="btn btn-outline btn-sm">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
						</svg>
						Edit Recipe
					</a>
					<button
						hx-delete={ fmt.Sprintf("/recipes/%d", recipe.Recipe.RecipeId) }
						hx-confirm="Are you sure you want to delete this recipe?"
						hx-target="body"
						class="btn btn-error btn-sm"
					>
						<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
						</svg>
						Delete
					</button>
				</div>
			}
		</div>
		if recipe.Recipe.ImageUrl != nil && *recipe.Recipe.ImageUrl != "" {
			<div class="flex justify-center mb-8">
				<div class="max-w-4xl w-full overflow-hidden rounded-2xl ring-4 ring-primary/10">
					<img src={ *recipe.Recipe.ImageUrl } alt={ recipe.Recipe.Title } class="w-full max-h-96 object-cover shadow-xl"/>
				</div>
			</div>
		}
		<section class="mb-12">
			<div class="grid grid-cols-2 md:grid-cols-4 gap-4">
				if recipe.Recipe.PrepTime != nil {
					<div class="card bg-base-100 shadow-lg">
						<div class="card-body text-center p-4">
							<div class="text-primary mb-2">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
							</div>
							<div class="text-xs text-base-content/60 font-medium uppercase tracking-wide">Prep Time</div>
							<div class="text-2xl font-bold text-base-content">{ fmt.Sprintf("%d min", *recipe.Recipe.PrepTime) }</div>
						</div>
					</div>
				}
				if recipe.Recipe.CookTime != nil {
					<div class="card bg-base-100 shadow-lg">
						<div class="card-body text-center p-4">
							<div class="text-primary mb-2">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z"></path>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z"></path>
								</svg>
							</div>
							<div class="text-xs text-base-content/60 font-medium uppercase tracking-wide">Cook Time</div>
							<div class="text-2xl font-bold text-base-content">{ fmt.Sprintf("%d min", *recipe.Recipe.CookTime) }</div>
						</div>
					</div>
				}
				if recipe.Recipe.Servings != nil {
					<div class="card bg-base-100 shadow-lg">
						<div class="card-body text-center p-4">
							<div class="text-primary mb-2">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
								</svg>
							</div>
							<div class="text-xs text-base-content/60 font-medium uppercase tracking-wide">Servings</div>
							<div class="text-2xl font-bold text-base-content">{ fmt.Sprintf("%d", *recipe.Recipe.Servings) }</div>
						</div>
					</div>
				}
				if recipe.Recipe.Difficulty != nil {
					<div class="card bg-base-100 shadow-lg">
						<div class="card-body text-center p-4">
							<div class="text-primary mb-2">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
								</svg>
							</div>
							<div class="text-xs text-base-content/60 font-medium uppercase tracking-wide">Difficulty</div>
							<div class="text-2xl font-bold text-base-content capitalize">{ *recipe.Recipe.Difficulty }</div>
						</div>
					</div>
				}
			</div>
		</section>
		<section class="space-y-8">
			<div class="grid lg:grid-cols-2 gap-8">
				<div class="card bg-base-100 shadow-xl">
					<div class="card-body">
						<div class="flex items-center gap-3 mb-6">
							<div class="text-primary">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v1a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2z"></path>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5h2a2 2 0 012 2v1a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2z"></path>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13H7a2 2 0 00-2 2v1a2 2 0 002 2h2a2 2 0 002-2v-1a2 2 0 00-2-2z"></path>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h2a2 2 0 012 2v1a2 2 0 01-2 2h-2a2 2 0 01-2-2v-1a2 2 0 012-2z"></path>
								</svg>
							</div>
							<h2 class="text-2xl font-semibold text-base-content">Ingredients</h2>
						</div>
						<ul class="space-y-3">
							for _, ingredient := range recipe.Ingredients {
								<li class="flex items-start p-3 bg-base-200 rounded-lg">
									<div class="w-2 h-2 bg-primary rounded-full mt-2 mr-4 flex-shrink-0"></div>
									<span class="text-base-content/90">
										if ingredient.Quantity != nil && ingredient.Unit != nil {
											<span class="font-medium">{ *ingredient.Quantity } { *ingredient.Unit }</span>
										} else if ingredient.Quantity != nil {
											<span class="font-medium">{ *ingredient.Quantity }</span>
										}
										{ " " }{ ingredient.IngredientName }
										if ingredient.Notes != nil {
											<span class="text-sm text-base-content/60 italic ml-2">({ *ingredient.Notes })</span>
										}
									</span>
								</li>
							}
						</ul>
					</div>
				</div>
				<div class="card bg-base-100 shadow-xl">
					<div class="card-body">
						<div class="flex items-center gap-3 mb-6">
							<div class="text-primary">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
								</svg>
							</div>
							<h2 class="text-2xl font-semibold text-base-content">Instructions</h2>
						</div>
						<ol class="space-y-4">
							for _, instruction := range recipe.Instructions {
								<li class="flex gap-4 p-4 bg-base-200 rounded-lg">
									<div class="flex-shrink-0">
										<div class="w-8 h-8 bg-primary text-primary-content rounded-full flex items-center justify-center font-bold text-sm">
											{ fmt.Sprintf("%d", instruction.StepNumber) }
										</div>
									</div>
									<span class="text-base-content/90 leading-relaxed pt-1">{ instruction.InstructionText }</span>
								</li>
							}
						</ol>
					</div>
				</div>
			</div>
		</section>
		<div class="flex justify-center pt-8 border-t border-base-300">
			<a href="/recipes" class="btn btn-ghost btn-lg">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"></path>
				</svg>
				Back to Recipes
			</a>
		</div>
	</div>
}

templ RecipeForm(recipe *recipe.RecipeWithDetails, isEdit bool) {
	<div class="max-w-6xl mx-auto px-4 py-8 md:py-12">
		<div class="text-center mb-6">
			if isEdit {
				<h1 class="text-5xl font-light mb-4 text-base-content">Edit <span class="text-primary">Recipe</span></h1>
			} else {
				<h1 class="text-5xl font-light mb-4 text-base-content">Create <span class="text-primary">Recipe</span></h1>
			}
		</div>
		<div class="card bg-base-100 shadow-2xl rounded-2xl">
			<div class="card-body p-8">
				<form
					if isEdit && recipe != nil {
						hx-put={ fmt.Sprintf("/recipes/%d", recipe.Recipe.RecipeId) }
					} else {
						hx-post="/recipes"
					}
					hx-trigger="submit"
					hx-target="#recipe-error"
					hx-target-error="#recipe-error"
					class="space-y-8"
				>
					<div id="recipe-error"></div>
					<div class="space-y-8">
						<section>
							<h2 class="text-2xl font-semibold mb-6 text-base-content border-b border-base-300 pb-2">Basic Information</h2>
							<div class="space-y-6">
								<div class="form-control">
									<div class="mb-2">
										<span class="label-text font-medium text-base-content">Recipe Title</span>
										<span class="label-text-alt text-error ml-1">Required</span>
									</div>
									<input
										type="text"
										name="title"
										if recipe != nil {
											value={ recipe.Recipe.Title }
										}
										placeholder="Enter a descriptive title for your recipe"
										required
										class="input input-bordered input-lg"
									/>
								</div>
								<div class="form-control">
									<div class="mb-2">
										<span class="label-text font-medium text-base-content">Description</span>
									</div>
									if recipe != nil && recipe.Recipe.Description != nil {
										<textarea
											name="description"
											rows="4"
											placeholder="Tell us about your recipe - what makes it special?"
											class="textarea textarea-bordered textarea-lg"
										>{ *recipe.Recipe.Description }</textarea>
									} else {
										<textarea
											name="description"
											rows="4"
											placeholder="Tell us about your recipe - what makes it special?"
											class="textarea textarea-bordered textarea-lg"
										></textarea>
									}
								</div>
								<div class="form-control">
									<div class="mb-2">
										<span class="label-text font-medium text-base-content">Recipe Image</span>
									</div>
									<input
										type="url"
										name="image_url"
										if recipe != nil && recipe.Recipe.ImageUrl != nil {
											value={ *recipe.Recipe.ImageUrl }
										}
										placeholder="https://example.com/your-recipe-image.jpg"
										class="input input-bordered input-lg"
									/>
								</div>
							</div>
						</section>
						<section>
							<h2 class="text-2xl font-semibold mb-6 text-base-content border-b border-base-300 pb-2">Recipe Details</h2>
							<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
								<div class="form-control">
									<label class="label">
										<span class="label-text font-medium">Prep Time</span>
									</label>
									<label class="input-group">
										<input
											type="number"
											name="prep_time"
											if recipe != nil && recipe.Recipe.PrepTime != nil {
												value={ fmt.Sprintf("%d", *recipe.Recipe.PrepTime) }
											}
											placeholder="30"
											min="0"
											class="input input-bordered w-full"
										/>
										<span class="bg-base-200">min</span>
									</label>
								</div>
								<div class="form-control">
									<label class="label">
										<span class="label-text font-medium">Cook Time</span>
									</label>
									<label class="input-group">
										<input
											type="number"
											name="cook_time"
											if recipe != nil && recipe.Recipe.CookTime != nil {
												value={ fmt.Sprintf("%d", *recipe.Recipe.CookTime) }
											}
											placeholder="45"
											min="0"
											class="input input-bordered w-full"
										/>
										<span class="bg-base-200">min</span>
									</label>
								</div>
								<div class="form-control">
									<label class="label">
										<span class="label-text font-medium">Servings</span>
									</label>
									<input
										type="number"
										name="servings"
										if recipe != nil && recipe.Recipe.Servings != nil {
											value={ fmt.Sprintf("%d", *recipe.Recipe.Servings) }
										}
										placeholder="4"
										min="1"
										class="input input-bordered"
									/>
								</div>
								<div class="form-control">
									<label class="label">
										<span class="label-text font-medium">Difficulty</span>
									</label>
									<select name="difficulty" class="select select-bordered">
										<option value="">Select difficulty</option>
										<option
											value="easy"
											if recipe != nil && recipe.Recipe.Difficulty != nil && *recipe.Recipe.Difficulty == "easy" {
												selected
											}
										>Easy</option>
										<option
											value="medium"
											if recipe != nil && recipe.Recipe.Difficulty != nil && *recipe.Recipe.Difficulty == "medium" {
												selected
											}
										>Medium</option>
										<option
											value="hard"
											if recipe != nil && recipe.Recipe.Difficulty != nil && *recipe.Recipe.Difficulty == "hard" {
												selected
											}
										>Hard</option>
									</select>
								</div>
							</div>
						</section>
						<section>
							<h2 class="text-2xl font-semibold mb-6 text-base-content border-b border-base-300 pb-2">
								Ingredients
								<span class="text-error text-sm font-normal ml-2">Required</span>
							</h2>
							<div class="card bg-base-200 shadow-lg rounded-2xl">
								<div class="card-body">
									<div id="ingredients-list" class="space-y-3">
										if recipe != nil && len(recipe.Ingredients) > 0 {
											for i, ingredient := range recipe.Ingredients {
												@IngredientInput(i, ingredient.IngredientName, ingredient.Quantity, ingredient.Unit)
											}
										} else {
											@IngredientInput(0, "", nil, nil)
										}
									</div>
									<button type="button" onclick="addIngredient()" class="btn btn-outline btn-sm mt-4">
										<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
										</svg>
										Add Ingredient
									</button>
								</div>
							</div>
						</section>
						<section>
							<h2 class="text-2xl font-semibold mb-6 text-base-content border-b border-base-300 pb-2">
								Instructions
								<span class="text-error text-sm font-normal ml-2">Required</span>
							</h2>
							<div class="card bg-base-200 shadow-lg rounded-2xl">
								<div class="card-body">
									<div id="instructions-list" class="space-y-3">
										if recipe != nil && len(recipe.Instructions) > 0 {
											for i, instruction := range recipe.Instructions {
												@InstructionInput(i, instruction.InstructionText)
											}
										} else {
											@InstructionInput(0, "")
										}
									</div>
									<button type="button" onclick="addInstruction()" class="btn btn-outline btn-sm mt-4">
										<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
										</svg>
										Add Step
									</button>
								</div>
							</div>
						</section>
						<div class="flex justify-center pt-8 border-t border-base-300">
							<div class="flex flex-col sm:flex-row gap-4">
								<a href="/recipes" class="btn btn-ghost btn-lg">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
									</svg>
									Cancel
								</a>
								<button type="submit" class="btn btn-primary btn-lg">
									if isEdit {
										<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
										</svg>
										Update Recipe
									} else {
										<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
										</svg>
										Create Recipe
									}
								</button>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
	<script>
		let ingredientCount = document.querySelectorAll(
			"#ingredients-list > div",
		).length;
		let instructionCount = document.querySelectorAll(
			"#instructions-list > div",
		).length;

		function addIngredient() {
			const container = document.getElementById("ingredients-list");
			const div = document.createElement("div");
			div.className = "flex gap-3 items-center";
			div.innerHTML = `
				<input type="text" name="ingredients[${ingredientCount}][name]" placeholder="e.g., Fresh basil leaves" required class="input input-bordered flex-1"/>
				<input type="text" name="ingredients[${ingredientCount}][quantity]" placeholder="2" class="input input-bordered w-20"/>
				<input type="text" name="ingredients[${ingredientCount}][unit]" placeholder="cups" class="input input-bordered w-24"/>
				<button type="button" onclick="this.parentElement.remove()" class="btn btn-ghost btn-sm btn-circle">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
					</svg>
				</button>
			`;
			container.appendChild(div);
			ingredientCount++;
		}

		function addInstruction() {
			const container = document.getElementById("instructions-list");
			const div = document.createElement("div");
			div.className = "flex gap-3 items-start";
			div.innerHTML = `
				<div class="badge badge-outline badge-lg mt-3">${instructionCount + 1}</div>
				<textarea name="instructions[${instructionCount}]" placeholder="Describe this step in detail..." required class="textarea textarea-bordered flex-1 min-h-[80px]"></textarea>
				<button type="button" onclick="this.parentElement.remove(); renumberInstructions()" class="btn btn-ghost btn-sm btn-circle mt-2">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
					</svg>
				</button>
			`;
			container.appendChild(div);
			instructionCount++;
		}

		function renumberInstructions() {
			const instructions = document.querySelectorAll(
				"#instructions-list > div",
			);
			instructions.forEach((div, index) => {
				div.querySelector(".badge").textContent = `${index + 1}`;
			});
			instructionCount = instructions.length;
		}
	</script>
}

templ IngredientInput(index int, name string, quantity *string, unit *string) {
	<div class="flex gap-3 items-center">
		<input
			type="text"
			name={ fmt.Sprintf("ingredients[%d][name]", index) }
			value={ name }
			placeholder="e.g., Fresh basil leaves"
			required
			class="input input-bordered flex-1"
		/>
		<input
			type="text"
			name={ fmt.Sprintf("ingredients[%d][quantity]", index) }
			if quantity != nil {
				value={ *quantity }
			}
			placeholder="2"
			class="input input-bordered w-20"
		/>
		<input
			type="text"
			name={ fmt.Sprintf("ingredients[%d][unit]", index) }
			if unit != nil {
				value={ *unit }
			}
			placeholder="cups"
			class="input input-bordered w-24"
		/>
		<button type="button" onclick="this.parentElement.remove()" class="btn btn-ghost btn-sm btn-circle">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
			</svg>
		</button>
	</div>
}

templ InstructionInput(index int, text string) {
	<div class="flex gap-3 items-start">
		<div class="badge badge-outline badge-lg mt-3">{ fmt.Sprintf("%d", index + 1) }</div>
		<textarea
			name={ fmt.Sprintf("instructions[%d]", index) }
			placeholder="Describe this step in detail..."
			required
			class="textarea textarea-bordered flex-1 min-h-[80px]"
		>{ text }</textarea>
		<button type="button" onclick="this.parentElement.remove(); renumberInstructions()" class="btn btn-ghost btn-sm btn-circle mt-2">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
			</svg>
		</button>
	</div>
}
